
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\012\002\000\002\005\006\000\002\006\003\000" +
    "\002\006\003\000\002\007\005\000\002\010\006\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\004" +
    "\000\002\011\005\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\006\000\002\011\006\000\002" +
    "\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\010\012\014\022\015\026\012\001\002\000" +
    "\014\002\ufffe\012\ufffe\022\ufffe\023\ufffe\026\ufffe\001\002" +
    "\000\004\004\065\001\002\000\014\002\ufffc\012\ufffc\022" +
    "\ufffc\023\ufffc\026\ufffc\001\002\000\004\002\064\001\002" +
    "\000\004\004\ufff9\001\002\000\004\004\ufff8\001\002\000" +
    "\004\016\062\001\002\000\012\002\001\012\014\022\015" +
    "\026\012\001\002\000\004\014\022\001\002\000\010\012" +
    "\ufffb\022\ufffb\026\ufffb\001\002\000\010\012\014\022\015" +
    "\026\012\001\002\000\012\012\014\022\015\023\021\026" +
    "\012\001\002\000\014\002\uffff\012\uffff\022\uffff\023\uffff" +
    "\026\uffff\001\002\000\014\002\ufffa\012\ufffa\022\ufffa\023" +
    "\ufffa\026\ufffa\001\002\000\022\006\023\014\032\017\024" +
    "\020\026\025\025\026\030\027\033\030\027\001\002\000" +
    "\022\006\023\014\032\017\024\020\026\025\025\026\030" +
    "\027\033\030\027\001\002\000\004\014\056\001\002\000" +
    "\022\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\015\uffed\021\uffed\001\002\000\004\014\053\001\002\000" +
    "\022\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\015\uffec\021\uffec\001\002\000\022\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\015\uffeb\021\uffeb\001\002" +
    "\000\020\005\037\006\041\007\043\010\042\011\035\015" +
    "\052\021\040\001\002\000\022\006\023\014\032\017\024" +
    "\020\026\025\025\026\030\027\033\030\027\001\002\000" +
    "\022\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\015\uffe8\021\uffe8\001\002\000\020\005\037\006\041\007" +
    "\043\010\042\011\035\015\036\021\040\001\002\000\022" +
    "\006\023\014\032\017\024\020\026\025\025\026\030\027" +
    "\033\030\027\001\002\000\022\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\015\uffee\021\uffee\001\002\000" +
    "\022\006\023\014\032\017\024\020\026\025\025\026\030" +
    "\027\033\030\027\001\002\000\022\006\023\014\032\017" +
    "\024\020\026\025\025\026\030\027\033\030\027\001\002" +
    "\000\022\006\023\014\032\017\024\020\026\025\025\026" +
    "\030\027\033\030\027\001\002\000\022\006\023\014\032" +
    "\017\024\020\026\025\025\026\030\027\033\030\027\001" +
    "\002\000\022\006\023\014\032\017\024\020\026\025\025" +
    "\026\030\027\033\030\027\001\002\000\022\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\015\ufff3\021\040" +
    "\001\002\000\022\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\015\ufff2\021\040\001\002\000\022\004\ufff4" +
    "\005\ufff4\006\ufff4\007\043\010\042\011\035\015\ufff4\021" +
    "\040\001\002\000\022\004\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\015\ufff0\021\040\001\002\000\022\004" +
    "\ufff5\005\ufff5\006\ufff5\007\043\010\042\011\035\015\ufff5" +
    "\021\040\001\002\000\022\004\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\015\ufff1\021\040\001\002\000\004" +
    "\004\ufff6\001\002\000\022\006\023\014\032\017\024\020" +
    "\026\025\025\026\030\027\033\030\027\001\002\000\020" +
    "\005\037\006\041\007\043\010\042\011\035\015\055\021" +
    "\040\001\002\000\022\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\015\uffe9\021\uffe9\001\002\000\022\006" +
    "\023\014\032\017\024\020\026\025\025\026\030\027\033" +
    "\030\027\001\002\000\020\005\037\006\041\007\043\010" +
    "\042\011\035\015\060\021\040\001\002\000\022\004\uffea" +
    "\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\015\uffea\021" +
    "\uffea\001\002\000\022\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\015\uffef\021\uffef\001\002\000\022\006" +
    "\023\014\032\017\024\020\026\025\025\026\030\027\033" +
    "\030\027\001\002\000\020\004\ufff7\005\037\006\041\007" +
    "\043\010\042\011\035\021\040\001\002\000\004\002\000" +
    "\001\002\000\014\002\ufffd\012\ufffd\022\ufffd\023\ufffd\026" +
    "\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\020\002\006\003\012\004\003\005\005\006" +
    "\004\007\007\010\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\017" +
    "\005\005\006\004\007\007\010\010\001\001\000\002\001" +
    "\001\000\004\012\015\001\001\000\016\003\016\004\003" +
    "\005\005\006\004\007\007\010\010\001\001\000\014\004" +
    "\017\005\005\006\004\007\007\010\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\030\001\001\000" +
    "\004\011\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\050\001\001\000\002\001" +
    "\001\000\004\011\047\001\001\000\004\011\046\001\001" +
    "\000\004\011\045\001\001\000\004\011\044\001\001\000" +
    "\004\011\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    // Pilha de tabelas de símbolos para representar escopos
    private Stack<HashMap<String, Object>> symbolStack = new Stack<>();

    // Inicia o escopo global
    {
        symbolStack.push(new HashMap<String, Object>());
    }

    // Entra no escopo 
    void enterScope() {
        //System.out.println("qtd escopo " + symbolStack.size());
        //System.out.println(symbolStack.push(new HashMap<String, Object>()));
        symbolStack.push(new HashMap<String, Object>());
        //System.out.println("qtd escopo " +symbolStack.size());
    }

    // Sai do escopo atual
    void exitScope() {
        if (!symbolStack.isEmpty()) {
            //System.out.println("qtd escopo " +symbolStack.size());
            //System.out.println(symbolStack.pop());
            symbolStack.pop();
            //System.out.println("qtd escopo " +symbolStack.size());
        } else {
            System.err.println("Erro: tentativa de sair de um escopo inexistente!");
        }
    }

    // Busca uma variável no escopo atual e nos escopos externos usando Iterator
    Object lookupSymbol(String id) {
        Iterator<HashMap<String, Object>> iterator = symbolStack.iterator();
        //System.out.println("it " + iterator);
        for( int i  = symbolStack.size(); i > 0; i--) {
            HashMap<String, Object> currentScope = symbolStack.get(i-1);
            //System.out.println("currentScope: " + currentScope);
            if (currentScope.containsKey(id)) {
                return currentScope.get(id);
            }
        }
        
        System.err.println("Erro: variável \"" + id + "\" não encontrada!");
        return null;
    }

    // Atribui uma variável no escopo adequado
    void assignSymbol(String id, Object value) {
        //System.out.println("pico "+ symbolStack.peek().put(id, value));
        symbolStack.peek().put(id, value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= command_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // command_list ::= command_list command_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // command_list ::= command_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // command_part ::= command SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command_part",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // command_part ::= command_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command_part",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;

        enterScope();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // command_block ::= LCURLY NT$0 command_list RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        exitScope();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command_block",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // command ::= assignment_command 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // command ::= print_command 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // assignment_command ::= ID ASSIGN expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            assignSymbol(id, e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_command",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // print_command ::= PRINT LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (e instanceof Double) {
            System.out.println(">> " + e);
        } else if (e instanceof String) {
            if (e.toString().charAt(0) == '"' && e.toString().charAt(e.toString().length()-1) == '"') {
                System.out.println(">> " + e.toString().substring(1, e.toString().length()-1));
            }if (e.toString().charAt(0) == '"' && !(e.toString().charAt(e.toString().length()-1) == '"')) {
                System.out.println(">> " + e.toString().substring(1, e.toString().length()));
            } if (!(e.toString().charAt(0) == '"') && e.toString().charAt(e.toString().length()-1) == '"') {
                System.out.println(">> " + e.toString().substring(0, e.toString().length()-1));
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_command",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr PLUS expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (e1 instanceof String && e2 instanceof String) {
            RESULT = e1.toString().substring(0, e1.toString().length()- 1) + e2.toString().substring(1, e2.toString().length());
            } else if (e1 instanceof String) {
                RESULT = e1.toString().substring(0, e1.toString().length()- 1) + e2.toString();
            } else if (e2 instanceof String) {
                RESULT = e1.toString() + e2.toString().substring(1, e2.toString().length()-1);
            } else if (e1 instanceof Double && e2 instanceof Double) {
                RESULT = (Double) e1 + (Double) e2;
            } else {
                throw new RuntimeException("Erro: soma inválida entre tipos incompatíveis.");
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr MINUS expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (e1 instanceof Double && e2 instanceof Double) {
                RESULT = (Double) e1 - (Double) e2; 
            } else {
                System.err.println("Erro: operação inválida!");
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr TIMES expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(e1 instanceof Double && e2 instanceof Double) {
                RESULT = (Double) e1 * (Double) e2; 
            } else {
                System.err.println("Erro: operação inválida!");
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr DIVIDE expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(e1 instanceof Double && e2 instanceof Double) {
                RESULT = (Double) e1 / (Double) e2; 
            } else {
                System.err.println("Erro: operação inválida!");
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr MOD expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(e1 instanceof Double && e2 instanceof Double) {
                RESULT = (Double) e1 % (Double) e2;
            } else {
                System.err.println("Erro: operação inválida!");
            } 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr EXP expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(e1 instanceof Double && e2 instanceof Double) {
                RESULT = Math.pow((Double) e1, (Double) e2); 
            } else {
                System.err.println("Erro: operação inválida!");
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= MINUS expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(e instanceof Double) {
                RESULT = -(Double) e; 
            } else {
                System.err.println("Erro: operação inválida!");
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(e instanceof Double) {
                RESULT = (Double) e; 
            } else {
                System.err.println("Erro: operação inválida!");
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(n instanceof Double) {
                RESULT = (Double) n; 
            } 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (s instanceof String) {
                RESULT = s;}
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  Object value = lookupSymbol(id);
                if( value == null ) {
                        System.err.println("Erro: variável \"" + id +
                                "\" não inicializada!");
                }
                else 
                { 
                    RESULT = value; 
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= SIN LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  if(e instanceof Double) {
                RESULT = Math.sin((Double) e);
                }
                else {
                    System.err.println("Erro: operação inválida!");
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= COS LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(e instanceof Double) {
                RESULT = Math.cos((Double) e);
                }
                else {
                    System.err.println("Erro: operação inválida!");
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= PI 
            {
              Object RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double pi = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(pi instanceof Double) {
                RESULT = pi; 
                }
                else {
                    System.err.println("Erro: operação inválida!");
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
